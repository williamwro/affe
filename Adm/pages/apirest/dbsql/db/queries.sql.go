// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package dbsql

import (
	"context"
	"database/sql"
)

const createEmpregador = `-- name: CreateEmpregador :one
INSERT INTO empregador(
	id, nome, responsavel, telefone, abreviacao, divisao)
	VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, nome, responsavel, telefone, abreviacao, divisao
`

type CreateEmpregadorParams struct {
	ID          int64
	Nome        sql.NullString
	Responsavel sql.NullString
	Telefone    sql.NullString
	Abreviacao  sql.NullString
	Divisao     sql.NullInt32
}

func (q *Queries) CreateEmpregador(ctx context.Context, arg CreateEmpregadorParams) (Empregador, error) {
	row := q.db.QueryRowContext(ctx, createEmpregador,
		arg.ID,
		arg.Nome,
		arg.Responsavel,
		arg.Telefone,
		arg.Abreviacao,
		arg.Divisao,
	)
	var i Empregador
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Responsavel,
		&i.Telefone,
		&i.Abreviacao,
		&i.Divisao,
	)
	return i, err
}

const deleteEmpregador = `-- name: DeleteEmpregador :exec
DELETE FROM empregador
	WHERE id=$1
`

func (q *Queries) DeleteEmpregador(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmpregador, id)
	return err
}

const listDivisao = `-- name: ListDivisao :many
SELECT nome, cidade, id_divisao, descricao
	FROM divisao
`

func (q *Queries) ListDivisao(ctx context.Context) ([]Divisao, error) {
	rows, err := q.db.QueryContext(ctx, listDivisao)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Divisao
	for rows.Next() {
		var i Divisao
		if err := rows.Scan(
			&i.Nome,
			&i.Cidade,
			&i.IDDivisao,
			&i.Descricao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmpregador = `-- name: ListEmpregador :many
SELECT id, nome, responsavel, telefone, abreviacao, divisao FROM empregador WHERE id = $1 LIMIT 1
`

func (q *Queries) ListEmpregador(ctx context.Context, id int64) ([]Empregador, error) {
	rows, err := q.db.QueryContext(ctx, listEmpregador, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Empregador
	for rows.Next() {
		var i Empregador
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Responsavel,
			&i.Telefone,
			&i.Abreviacao,
			&i.Divisao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmpregadores = `-- name: ListEmpregadores :many
SELECT id, nome, responsavel, telefone, abreviacao, divisao FROM empregador
`

func (q *Queries) ListEmpregadores(ctx context.Context) ([]Empregador, error) {
	rows, err := q.db.QueryContext(ctx, listEmpregadores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Empregador
	for rows.Next() {
		var i Empregador
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Responsavel,
			&i.Telefone,
			&i.Abreviacao,
			&i.Divisao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmpregador = `-- name: UpdateEmpregador :exec
UPDATE empregador
	SET id=$2, nome=$3, responsavel=$4, telefone=$5, abreviacao=$6, divisao=$7
	WHERE Id=$1 RETURNING id, nome, responsavel, telefone, abreviacao, divisao
`

type UpdateEmpregadorParams struct {
	ID          int64
	ID_2        int64
	Nome        sql.NullString
	Responsavel sql.NullString
	Telefone    sql.NullString
	Abreviacao  sql.NullString
	Divisao     sql.NullInt32
}

func (q *Queries) UpdateEmpregador(ctx context.Context, arg UpdateEmpregadorParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpregador,
		arg.ID,
		arg.ID_2,
		arg.Nome,
		arg.Responsavel,
		arg.Telefone,
		arg.Abreviacao,
		arg.Divisao,
	)
	return err
}
